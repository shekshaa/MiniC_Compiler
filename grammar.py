First = {'program': ['EOF', 'int', 'void'],
         'declaration': ['int', 'void'],
         'type_sepc': ['int', 'void'],
         'params': ['int', 'void'],
         'X': ['eps', ','],
         'param': ['int', 'void'],
         'Y': ['[', 'eps'],
         'cmpd_stmt': ['{'],
         'stmt_list': ['eps', '{', 'continue', 'break', 'if', 'while', 'return', 'switch', '(', 'num', 'id', ';'],
         'stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', 'num', '(', 'id'],
         'exp-stmt': ['continue', 'break', ';', '(', 'num', 'id'],
         'sel-stmt': ['if'],
         'itr-stmt': ['while'],
         'ret-stmt': ['return'],
         'swt-stmt': ['switch'],
         'case-stmt': ['case'],
         'default-stmt': ['default', 'eps'],
         'exp': ['(', 'num', 'id'],
         'var': ['id'],
         'K': ['[', 'eps'],
         'simp-exp': ['(', 'id', 'num'],
         'J': ['eps', '<', '=='],
         'M': ['eps', '+', '-'],
         'add-exp': ['(', 'id', 'num'],
         'term': ['(', 'id', 'num'],
         'E': ['*', 'eps'],
         'factor': ['(', 'id', 'num'],
         'call': ['id'],
         'args': ['eps', '(', 'num', 'id']}

Follow = {'program': ['$'],
          'declaration': ['int', 'void', 'EOF', '{', 'conitnue', 'break', ';', 'if', 'while', 'return', 'switch', '(',
                          'num', 'id', '}'],
          'type_spec': ['id'],
          'params': [')'],
          'X': [')'],
          'param': [',', ')'],
          'Y': [',', ')'],
          'cmpd_stmt': ['int', 'void', 'EOF', '{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(',
                        'num', 'id', '}', 'else', 'case', 'default'],
          'stmt_list': ['}', 'case', 'default'],
          'stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', 'num', '(', 'id', '}',
                   'else', 'case', 'default'],
          'exp-stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(', 'num', 'id', '}', 'else',
                       'case', 'default'],
          'sel-stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(', 'num', 'id', '}', 'else',
                       'case', 'default'],
          'itr-stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(', 'num', 'id', '}', 'else',
                       'case', 'default'],
          'ret-stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(', 'num', 'id', '}', 'else',
                       'case', 'default'],
          'swt-stmt': ['{', 'continue', 'break', ';', 'if', 'while', 'return', 'switch', '(', 'num', 'id', '}', 'else',
                       'case', 'default'],
          'case-stmt': ['case', 'default', '}'],
          'default-stmt': ['}'],
          'exp': [';', ')', ']', ','],
          'var': [],
          'K': ['=', '*', '+', '-', '<', '==', ';', ')', ']', ','],
          'simp-exp': [],
          'J': [';', ')', ']', ','],
          'M': ['<', '==', ';', ')', ']', ','],
          'add-exp': ['<', '==', ';', ')', '}', ','],
          'term': ['+', '-', '<', '==', ';', ')', ']', ','],
          'E': ['+', '-', '<', '==', ';', ')', ']', ','],
          'factor': ['+', '*', '-', '<', '==', ';', ')', ']', ','],
          'call': [],
          'args': [')']}
